##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := Python_Pin

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := 

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

###############
#
#  SEPERATE COMPILATION INSTRUCTIONS 
#
# Top one is the main pin tool each subsequent one is a dependency. The final call links them all together
# To add another dependecy copy the block and chang ethe name to reflect your files and append your file name and the
# h file to the linkers list You can verify everything worked by looking in the build directory and you should see your
# object file
#
###############3

# -I/opt/Python-2.7.8/Include
PYTHON_SRC_PATH := /home/liyiwei/tools/Python-2.7.8
PYTHON_PATH := /home/liyiwei/tools/python2
CUSTOM_PYTHON_FLAGS := $(PYTHON_PATH)/lib/libpython2.7.so.1.0 -L$(PYTHON_SRC_PATH)/build/ -L$(PYTHON_PATH)/lib -L$(PYTHON_SRC_PATH)/build/lib.linux-x86_64-2.7 -I$(PYTHON_SRC_PATH)/Include -rdynamic -I$(PYTHON_PATH)/include/python2.7 -Xlinker -export-dynamic -fPIC

REGULAR_PYTHON_FLAGS := -rdynamic -nostdlib -static -L/usr/lib/python2.7/config-x86_64-linux-gnu -L/usr/lib -lpython2.7 -lpthread -ldl  -lutil -lm  -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions -I/usr/include/python2.7 -I/usr/include/x86_64-linux-gnu/python2.7  -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security  -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes 
# REGULAR_PYTHON_FLAGS := -lpython2.7 -L/usr/lib/x86_64-linux-gnu/ -I/usr/include/python2.7 -rdynamic
PYTHON_FLAGS := $(CUSTOM_PYTHON_FLAGS)

# Build the intermediate object file.
$(OBJDIR)Python_Pin$(OBJ_SUFFIX): Python_Pin.cpp
	$(CXX) $(PYTHON_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)IMG$(OBJ_SUFFIX): IMG.cpp IMG.h
	$(CC) $(PYTHON_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)RTN$(OBJ_SUFFIX): RTN.cpp RTN.h
	$(CC) $(PYTHON_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)SYS$(OBJ_SUFFIX): SYS.cpp SYS.h
	$(CC) $(PYTHON_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)TRACE$(OBJ_SUFFIX): TRACE.cpp TRACE.h
	$(CC) $(PYTHON_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)INS$(OBJ_SUFFIX): INS.cpp INS.h
	$(CC) $(PYTHON_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)REG$(OBJ_SUFFIX): REG.cpp REG.h
	$(CC) $(PYTHON_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the tool as a dll (shared object).
$(OBJDIR)Python_Pin$(PINTOOL_SUFFIX): $(OBJDIR)Python_Pin$(OBJ_SUFFIX) $(OBJDIR)IMG$(OBJ_SUFFIX) IMG.h $(OBJDIR)RTN$(OBJ_SUFFIX) RTN.h $(OBJDIR)SYS$(OBJ_SUFFIX) SYS.h $(OBJDIR)TRACE$(OBJ_SUFFIX) TRACE.h $(OBJDIR)INS$(OBJ_SUFFIX) INS.h $(OBJDIR)REG$(OBJ_SUFFIX) REG.h
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS) $(PYTHON_FLAGS)
